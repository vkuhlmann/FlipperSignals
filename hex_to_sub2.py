from pathlib import Path
import numpy as np

signal = "93cfe01c9f0000c0003210303c0009fce18100009f0f80"

header = """Filetype: Flipper SubGhz RAW File
Version: 1
Frequency: 868950000
Preset: FuriHalSubGhzPresetOok650Async
Protocol: RAW
"""

signals = [
    "00010010011110011111110000000011100100111110000000000000000110000000000000000110010000100000011000000111100000000000000100111111100111000011000000100000000000000001001111100001111100",
    "000100100111100111111100000000111001001111100000000000000001100000000000000000011001000011001000000000010011001111110011110000000011001000000001100000000000000001000000100111111000000000",
    "000100100111100111111100000000111001001111100000000000000001100000000000000000000110010000001100100001001001000011100110000001001001001100100000000000000000000000000000000000010000000010011100",
    "0001001001111001111111000000001110010011111000000000000000011000000000000110000000000110010010000001001100100111001100001100100001000000111001110010000000000001100100110011000010000000",
    "000100100111100111111100000000111001001111100000000000000001100000000000000110000000000111110010000110010000000010010010000001001000000111000010010000100000000000000111100111000010000100",
    "000100100111100111111100000000111001001111100000000000000001100000000000011000011000000000011111000011001001110000111100000000000000001001000010010010000000000000011000000100110000110010",
    "00010010011110011111110000000011100100111110000000000000000110000000000001001000011000000000011111000000111001100001100100100001110011110011111000000000000001000000100001000010010000"
]

dst_file = Path("blinds_sig3.sub")

with dst_file.open("w", encoding="ascii") as f:
    f.write(header)

    for signal in signals:
        # signal = bytes.fromhex(signal)
        # signal = int.from_bytes(signal, byteorder="big", signed=False)
        # signal = [int(a) for a in f"{signal:08b}"]

        signal = [int(a) for a in signal]

        signal_bits = np.array(signal).reshape(-1, 2)
        signal_bits = (signal_bits + 1) * 418
        signal_bits[:,0] *= -1

        val = [
            int(10e3 + 50),
            # -418,
            # 418,
            # -418,
            *signal_bits.flatten(),
            -5300
        ]

        val = [
            *(val * 4)[:-1],
            -int(1e6)
        ]

        assert np.all(np.sign(val[::2]) == 1)
        assert np.all(np.sign(val[1::2]) == -1)

        # assert val[-1] < 0


        # print(val)

        # signal = int.from_bytes(bytes.fromhex(signal), byteorder="big", signed=False)


        # for i in range(0, len(signal), 2):
        #     f.write(f"RAW_Data: {signal[i:i+2]}\n")

        signal_line = " ".join(str(a) for a in val)

        # for i in range(4):
        #     f.write()

        f.write(f"RAW_Data: {signal_line}\n")




